@import "../support";
@import "../layout/grid-background";
@import "units";

$base-font-size: 16px !default;

$base-line-height: 24px !default;

$rhythm-unit: 'em' !default;

$rem-with-px-fallback: true !default;

$default-rhythm-border-width: 1px !default;
$default-rhythm-border-style: solid !default;

$round-to-nearest-half-line: false !default;

$min-line-padding: 2px !default;

$base-leader: convert-length($base-line-height - $base-font-size, $rhythm-unit, $base-font-size);

$base-half-leader: $base-leader / 2;

$relative-font-sizing: if($rhythm-unit == px, false, true);

@if unit($base-font-size)   != 'px' { @warn "$base-font-size must resolve to a pixel unit."; }
@if unit($base-line-height) != 'px' { @warn "$base-line-height must resolve to a pixel unit."; }
@if $rhythm-unit != 'px' and $rhythm-unit != 'em' and $rhythm-unit != 'rem' {
  @warn "$rhythm-unit must be `px`, `em` or `rem`.";
}


@function rhythm($lines: 1, $font-size: $base-font-size, $offset: 0) {
  $rhythm: convert-length($lines * $base-line-height - $offset, $rhythm-unit, $font-size);
  @if unit($rhythm) == px {
    $rhythm: floor($rhythm);
  }
  @return $rhythm;
}

@function lines-for-font-size($font-size) {
  $lines: if($round-to-nearest-half-line,
             ceil(2 * $font-size / $base-line-height) / 2,
             ceil($font-size / $base-line-height));
  @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {
    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);
  }
  @return $lines;
}


@mixin output-rhythm($property, $values) {
  @if $rhythm-unit == rem and $rem-with-px-fallback {
    @include rem($property, $values);
  }
  @else {
    $output: ();
    @each $value in $values {
      @if unit($value) == px {
        $output: join($output, round($value));
      }
      @else {
        $output: join($output, $value);
      }
    }
    #{$property}: $output;
  }
}

@mixin establish-baseline($font-size: $base-font-size) {
  @if (unit($font-size) == "rem" or unit($font-size) == "em") {
    $font-size: ($font-size / ($font-size * 0 + 1)) * $browser-default-font-size;
    $relative-size: 100% * ($font-size / $browser-default-font-size);
  }

  @else if (unit($font-size) == "%") {
    $relative-size: $font-size;
  }

  @if support-legacy-browser(ie, "6") and (not $relative-font-sizing) {
    * html { font-size: $relative-size; }
  }
  html {
    font-size: if($relative-font-sizing, $relative-size, $font-size);

    @if $relative-font-sizing {
      line-height: convert-length($base-line-height, em);
    }
    @else {
      line-height: round($base-line-height);
    }
  }
}

//
@mixin reset-baseline($font-size: $base-font-size) {
  @include adjust-leading-to(1, $font-size);
}

@mixin debug-vertical-alignment($img: false) {
  @if $img {
    background: image-url($img);
  }
  @else {
    @include baseline-grid-background(if($round-to-nearest-half-line, rhythm(1/2), rhythm(1)));
  }
}

@mixin adjust-font-size-to($to-size, $lines: auto, $from-size: $base-font-size) {
  $to-size: convert-length($to-size, px, $from-size);
  @if $lines == auto {
    $lines: lines-for-font-size($to-size);
  }
  @include output-rhythm(font-size, convert-length($to-size, $rhythm-unit, $from-size));
  @include adjust-leading-to($lines, $to-size);
}

@mixin adjust-leading-to($lines, $font-size: $base-font-size) {
  @include output-rhythm(line-height, rhythm($lines, $font-size));
}

@mixin leader($lines: 1, $font-size: $base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-top, rhythm($lines, $font-size));
}

@mixin padding-leader($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(padding-top, rhythm($lines, $font-size));
}

@mixin margin-leader($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(margin-top, rhythm($lines, $font-size));
}

@mixin trailer($lines: 1, $font-size: $base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-bottom, rhythm($lines, $font-size));
}

@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(padding-bottom, rhythm($lines, $font-size));
}

@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {
  @include output-rhythm(margin-bottom, rhythm($lines, $font-size));
}

@mixin rhythm(
  $leader: 1,
  $padding-leader: 0,
  $padding-trailer: $padding-leader,
  $trailer: $leader,
  $font-size: $base-font-size
) {
  @include leader($leader, $font-size);
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
  @include trailer($trailer, $font-size);
}

@mixin rhythm-margins(
  $leader: 1,
  $trailer: $leader,
  $font-size: $base-font-size
) {
  @include leader($leader, $font-size);
  @include trailer($trailer, $font-size);
}

@mixin rhythm-padding(
  $padding-leader: 1,
  $padding-trailer: $padding-leader,
  $font-size: $base-font-size
) {
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
}

@mixin apply-side-rhythm-border(
  $side,
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  $border-prop: if($side == all, border, border-#{$side});
  @include output-rhythm(#{$border-prop}-width, convert-length($width, $rhythm-unit, $font-size));
  #{$border-prop}-style: nth($border-style, 1);
  @if type-of($border-style) == list and length($border-style) > 1 {
    #{$border-prop}-color: nth($border-style, 2);
  }
  $padding-prop: if($side == all, padding, padding-#{$side});
  @include output-rhythm(#{$padding-prop}, rhythm($lines, $font-size, $offset: $width));
}

@mixin leading-border(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);
}

@mixin trailing-border(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);
}

@mixin horizontal-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include leading-border($width, $lines, $font-size, $border-style);
  @include trailing-border($width, $lines, $font-size, $border-style);
}

@mixin h-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include horizontal-borders($width, $lines, $font-size, $border-style);
}

@mixin rhythm-borders(
  $width: $default-rhythm-border-width,
  $lines: 1,
  $font-size: $base-font-size,
  $border-style: $default-rhythm-border-style
) {
  @include apply-side-rhythm-border(all, $width, $lines, $font-size, $border-style);
}
